//
// value getters, base ✅
//


@function medium($m: $curr-m) {
  @if not $done-m-init { @return error("m not initialized; please '@include m-init()'"); }
  @if $m { @return map-get($media, $m) or error("medium '#{$m}' not found in $media");}
  @return $base;
}


@function medium-orig($m: $curr-m) {
  @if not $done-m-init { @return error("m not initialized; please '@include m-init()'"); }
  @if $m { @return map-get($media-orig, $m) or error("original medium '#{$m}' not found in $media"); }
  @return $base-orig;
}


//
// value getters, generic
//


@function medium-var($value-key, $m: $curr-m) {
  $medium: medium($m);
  @if $medium {
    $medium-desc: if($m, "$medium '#{$m}'", "$base");
    @return map-get($medium, $value-key) or error("key '#{$value-key}' not found in #{$medium-desc}");
  }
  @return $medium; // will be null if $throw-catch is true; otherwise will have @error'd out
}


@function medium-orig-var($value-key, $m: $curr-m) {
  $medium-orig: medium-orig($m);
  @if $medium-orig {
    $medium-desc: if($m, "$medium-orig '#{$m}'", "$base-orig");
    @return map-get($medium-orig, $value-key) or error("key '#{$value-key}' not found in #{$medium-desc}");
  }
  @return $medium-orig; // will be null if $throw-catch is true; otherwise will have @error'd out
}

//
// aliases of above
//


@function m($args...) { @return medium($args...);}
@function m-orig($args...) { @return medium-orig($args...);}

@function m-var($args...) { @return medium-var($args...);}
@function m-orig-var($args...) { @return medium-orig-var($args...);}


//
// value getters, simple ✅
//

@function size($mult: $curr-size, $m: $curr-m) {
  @if not $mult { @return null; }
  $mult: __mult($mult, 'size', $m);
  @return if(is-unitless($mult), $mult * 1rem, $mult);
}


@function line($mult: $curr-line, $m: $curr-m) {
  @if not $mult { @return null; }
  $mult: __mult($mult, 'line', $m);
  @return if(is-unitless($mult), $mult * medium-var('line', $m), $mult);
}


@function inner-x($mult: $curr-inner-x, $m: $curr-m) {
  @if not $mult { @return null; }
  $mult: __mult($mult, 'inner-x', $m);
  @return if(is-unitless($mult), $mult * medium-var('inner-x', $m), $mult);
}


@function inner-y($mult: $curr-inner-y, $m: $curr-m) {
  @if not $mult { @return null; }
  $mult: __mult($mult, 'inner-y', $m);
  @return if(is-unitless($mult), $mult * medium-var('inner-y', $m), $mult);
}


@function outer-top($mult: $curr-outer-y, $m: $curr-m) {
  @if not $mult { @return null; }
  $mult: __mult($mult, 'outer-y', $m);
  @return if(is-unitless($mult), $mult * medium-var('outer-top', $m), $mult);
}


@function outer-right($mult: $curr-outer-x, $m: $curr-m) {
  @if not $mult { @return null; }
  $mult: __mult($mult, 'outer-x', $m);
  @return if(is-unitless($mult), $mult * medium-var('outer-right', $m), $mult);
}


@function outer-bottom($mult: $curr-outer-y, $m: $curr-m) {
  @if not $mult { @return null; }
  $mult: __mult($mult, 'outer-y', $m);
  @return if(is-unitless($mult), $mult * medium-var('outer-bottom', $m), $mult);
}


@function outer-left($mult: $curr-outer-x, $m: $curr-m) {
  @if not $mult { @return null; }
  $mult: __mult($mult, 'outer-x', $m);
  @return if(is-unitless($mult), $mult * medium-var('outer-left', $m), $mult);
}
