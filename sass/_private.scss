//
// init helpers
//


@function __normalize-medium($medium, $ref-font-size: null) {

  // get reference font size
  $ref-font-size: $ref-font-size or map-get($base, 'font-size');

  // normalize size to px
  $medium-size: map-get($medium, 'font-size');
  @if unit($medium-size) != 'px' { $medium-size: strip($medium-size) * $ref-font-size; }

  // collect these along with unitless scale
  $normalized: (
    'font-size': $medium-size,
    'html-scale': strip($medium-size / 16px)
  );

  // normalize all other number values to rem
  @each $key, $value in map-remove($medium, 'font-size') {
    @if if(is-number($value), unit($value) == 'px', false) {
      $normalized: map-merge($normalized, ($key: $value / $medium-size * 1rem));
    }
  }

  // merge normalized values back to medium
  @return map-merge($medium, $normalized);
}


@function __populate-medium-by-breakpoint($medium) {
  $breakpoint: map-get($medium, 'breakpoint');
  $outer-width: assert($breakpoint / map-get($medium, 'html-scale'), rem);
  $outer-x: map-get($medium, 'outer-right') + map-get($medium, 'outer-left');
  @return map-merge($medium, ( 'outer-width': $outer-width, 'inner-width': $outer-width - $outer-x ));
}


@function __populate-medium-by-grid-columns($medium) {
  $size: map-get($medium, 'font-size');
  $inner-x: map-get($medium, 'inner-x');
  $outer-x: map-get($medium, 'outer-right') + map-get($medium, 'outer-left');
  $copy-width: map-get($medium, 'copy-width');
  $copy-columns: map-get($medium, 'copy-columns');
  $grid-columns: map-get($medium, 'grid-columns');
  $copy-vs-grid: $copy-columns/$grid-columns;
  $inner-width: ($copy-width + $inner-x) / $copy-vs-grid - $inner-x;
  $outer-width: $inner-width + $outer-x;
  $breakpoint: assert($outer-width * map-get($medium, 'html-scale'), em);
  @return map-merge($medium, ( 'outer-width': $outer-width, 'inner-width': $inner-width, 'breakpoint': $breakpoint ));
}


//
// query helpers
//

// @function __props-for($group-key){
//   $groups: (
//     // size: (size-mults),
//     // line: (line-mults),
//     inner-x: (inner-x-mults),
//     inner-y: (inner-y-mults),
//     outer-x: (outer-right outer-left outer-x-mults),
//     outer-y: (outer-top outer-bottom outer-y-mults),
//     outer-top: (outer-y-mults),
//     outer-right: (outer-x-mults),
//     outer-bottom: (outer-y-mults),
//     outer-left: (outer-x-mults),
//     stack: (inner-y inner-y-mults),
//     grid: (inner-x inner-x-mults grid-columns),
//     typo: (sizes inner-y), // this is optional
//   );
//   $group-keys: map-keys($groups);
//   @if index($group-keys, $group-key) {
//     $group: map-get($groups, $group-key);
//     @each $item in $group {
//       @if index($group-keys, $item) {
//         $group: join($group, map-get($groups, $item));
//       }
//     }
//     @return $group;
//   }
//   @return $group-key;
// }


// @function __media-for($group-keys...) {
//   $group-keys: __normalize-arglist($group-keys...);
//   $props: $group-keys;
//   $media-keys: ();
//   @each $key in $group-keys {
//     $props: join($props, __props-for($key));
//   }

//   @each $m, $medium in $media-orig {
//     @if __contains-any(map-keys($medium), $props) {
//       $media-keys: append($media-keys, $m);
//     }
//   }
//   @return $media-keys;
// }


@function __query-string($min: null, $max: null) {
  $min: if(map-has-key($media, $min), __get($media, $min, 'breakpoint'), $min);
  $max: if(map-has-key($media, $max), __get($media, $max, 'breakpoint'), $max);
  @return 'screen'
    + if($min, ' and (min-width: #{$min})', '')
    + if($max, ' and (max-width: #{$max - 0.001})', '');
}


//
// mixin helper
//


// @mixin __mm($keys: map-keys($media), $head: true, $tail: true) {
//   $pair-set: __range-pairs($keys, $head, $tail);
//   @if length($pair-set) == 0 { @content; }
//   @else {
//     @each $pair in $pair-set {
//       @include m($pair...) {
//         @content;
//       }
//     }
//   }
// }


//
// utilities
//


@function __nth($list, $n) {
  // TODO allow it to handle strings; create str-nth
  @if length($list) == 0 or $n < 1 or $n > length($list) { @return null; }
  @return nth($list, $n);
}

@function __first($list) {
  @return __nth($list, 1);
}

@function __last($list) {
  @return __nth($list, length($list));
}

@function __contains-any($list, $items) {
  @each $item in $items { @if index($list, $item) { @return true; } }
  @return false;
}

@function __slice($list, $start: 1, $end: length($list), $sep: list-separator($list)) {
  $output: ();
  @if $start >= 1 and $end >= $start {
    @for $i from $start through $end {
      $output: append($output, nth($list, $i), $sep);
    }
  }
  // @return if(length($output)==1,nth($output,1),$output);
  @return $output;
}

@function __normalize-arglist($arglist...) {
  @if length($arglist) == 1 and type-of(nth($arglist, 1)) == list {
    $arglist: join((), nth($arglist, 1), 'comma');
  }
  @return $arglist;
}

@function __range-pairs($list, $head: true, $tail: true) {
  @if length($list) == 0 { @return $list; }
  $result: ();
  @for $n from 1 through length($list) + 1 {
    $m: $n - 1; $a: if($m == 0, null, nth($list, $m));
    $b: if($n > length($list), null, nth($list, $n));
    $result: append($result, ($a $b), 'comma');
  }
  $length: length($result);
  $start: if($head, 1, 2);
  $end: if($tail, $length, $length - 1);
  @return __slice($result, $start, $end);
}

@function __get($map, $keys...) {
  @if type-of($map) != 'map' or length($map) == 0 { @error 'non-map or zero-length-map passed to __get'; }
  @each $key in $keys {
    @if type-of($map) != 'map' { @return $map; }
    $map: map-get($map, $key);
  }
  @return $map;
}

@function __deep-merge($target, $source) {
  $source: $source or ();
  $target: $target or ();
  $result: ();

  // if both source and target are map-compatible
  @if is-map($source) and is-map($target) {
    $result: $target;
    @each $key, $s-value in $source {
      $t-value: map-get($target, $key);
      @if index('list' 'map', type-of($s-value)) or index('list' 'map', type-of($t-value)) {
        $result: map-merge($result, ($key: __deep-merge($t-value, $s-value)));
      } @else {
        $result: map-merge($result, ($key: $s-value));
      }
    }
  }

  // else source overwrites target
  @else { $result: $source; }

  @return $result;
}


//
// mm helpers
//


@function __mm-filter-orig($media-keys, $props...) {
  @if length($props) < 1 { @return (); }
  $result: ();
  @each $m in $media-keys {
    $test: false;
    @each $prop in $props { $test: if(get(m-orig($m), $prop...), true, $test); }
    $result: if($test, append($result, $m), $result);
  }
  @return if(length($result) > 0, $result, ());
}

@function __mm-pairs($list:()) {
  @if length($list) == 0 { @return $list; }
  $result: ();
  @for $n from 1 through length($list) - 1 {
    $result: append($result, (nth($list, $n) nth($list, $n + 1)), 'comma');
  }
  @return $result;
}

@function __mm-slice($lo: null, $hi: null) {
  $keys: join(join(null, map-keys($media)), null);
  $index1: if($lo, index($keys, $lo), 1);
  $index2: if($hi, index($keys, $hi), length($keys));
  @return if($index1 and $index2, __slice($keys, $index1, $index2), ());
}

// @function __mm-filter($props...) {
//   @if length($props) < 1 { @return (); }
//   $result: ();
//   @each $m, $medium-orig in $media-orig {
//     $test: false;
//     @each $prop in $props { $test: if(get($medium-orig, $prop...), true, $test); }
//     $result: if($test, append($result, $m), $result);
//   }
//   @return if(length($result) > 0, join(join(null, $result), null), ());
// }

@function __mm-where($props...) {
  $result: __mm-filter-orig(map-keys($media), $props...);
  @return if(length($result) > 0, join(join(null, $result), null), ());
}

@function mm($lo: null, $hi: null, $props...) {
  $m-list: __mm-slice($lo, $hi);
  @if length($props) > 0 and length($m-list) > 2 {
    $len: length($m-list);
    $m-list: join(
      join(
        __slice($m-list, 1, 1),
        __mm-filter-orig(__slice($m-list, 2, $len - 1), $props...)
      ),
      __slice($m-list, $len, $len)
    );
  }
  @return __mm-pairs($m-list);
}
