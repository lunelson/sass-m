//
// utilities [private]
// --------------------------------------------------------------------------

  @function __nth($list, $n) {
    // TODO allow it to handle strings; create str-nth
    @if length($list) == 0 or $n < 1 or $n > length($list) { @return null; }
    @return nth($list, $n);
  }

  @function __first($list) {
    @return __nth($list, 1);
  }

  @function __last($list) {
    @return __nth($list, length($list));
  }

  @function __contains-any($list, $items) {
    @each $item in $items { @if index($list, $item) { @return true; } }
    @return false;
  }

  // TODO: make sure slice supports same logic/signature as native str-slice function
  @function __slice($list, $start: 1, $end: length($list), $sep: list-separator($list)) {
    $output: ();
    @if $start >= 1 and $end >= $start {
      @for $i from $start through $end {
        $output: append($output, nth($list, $i), $sep);
      }
    }
    // @return if(length($output)==1,nth($output,1),$output);
    @return $output;
  }

  @function __normalize-arglist($arglist...) {
    @if length($arglist) == 1 and type-of(nth($arglist, 1)) == list {
      $arglist: join((), nth($arglist, 1), 'comma');
    }
    @return $arglist;
  }

  @function __range-pairs($list, $head: true, $tail: true) {
    @if length($list) == 0 { @return $list; }
    $result: ();
    @for $n from 1 through length($list) + 1 {
      $m: $n - 1; $a: if($m == 0, null, nth($list, $m));
      $b: if($n > length($list), null, nth($list, $n));
      $result: append($result, ($a $b), 'comma');
    }
    $length: length($result);
    $start: if($head, 1, 2);
    $end: if($tail, $length, $length - 1);
    @return __slice($result, $start, $end);
  }

  @function __get($map, $keys...) {
    @if type-of($map) != 'map' or length($map) == 0 { @error 'non-map or zero-length-map passed to __get'; }
    @each $key in $keys {
      @if type-of($map) != 'map' { @return $map; }
      $map: map-get($map, $key);
    }
    @return $map;
  }

  @function __one($unit:'') {
    $ones: ('em': 1em, 'ex': 1ex, 'ch': 1ch, 'rem': 1rem, '%': 1%, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax, 'cm': 1cm, 'mm': 1mm, 'in': 1in, 'px': 1px, 'pt': 1pt, 'pc': 1pc, 'deg': 1deg, 'grad': 1grad, 'rad': 1rad, 'turn': 1turn, 's': 1s, 'ms': 1ms, 'dpi': 1dpi, 'dpcm': 1dpcm, 'dppx': 1dppx);
    @return map-get($ones, $unit) or 1;
  }

  @function __strip($value) {
    @if type-of($value) != 'number' { @error 'non-number passed to __strip'}
    @return if(unitless($value), $value, $value / __one(unit($value)));
  }

  @function __assert($value, $unit: '') {
    @if type-of($value) != 'number' { @error 'non-number passed to __assert'}
    @return __strip($value) * __one($unit);
  }

  @function __convert($value, $unit: '') {
    @if type-of($value) != 'number' { @error 'non-number passed to __convert'}
    @return __one($unit) + __strip($value);
  }


//
// selectors
// --------------------------------------------------------------------------

  @function not-selector($selector, $nots...) {
    @each $not in $nots { $selector: $selector + ':not(#{$not})'; }
    @return selector-parse($selector);
  }

  @function unique-selector() {
    @return unquote("%#{unique-id()}");
  }

  // get last parents in & list(s)
  @function last-parents {
    $out: ();
    @each $list in & {
      $last: nth($list, length($list));
      @if not index($out, $last) {
        $out: append($out, $last, 'comma');
      }
    }
    @return selector-parse($out);
  }

  // get initial parents in & list(s)
  @function initial-parents {
    $out: ();
    @each $list in & {
      $initial: slice($list, 1,  length($list) - 1);
      @if not index($out, $initial) {
        $out: append($out, $initial, 'comma');
      }
    }
    @return selector-parse($out);
  }

  @function insert-parents($selectors, $combinator: '') {
    $out: ();
    $lasts: last-parents();
    $initials: initial-parents();
    $selectors: if(length($selectors) == 0, '', $selectors);
    // $selectors: if(length($selectors)==0, $lasts, $selectors); // use self if no arg given
    @if length(nth($initials, 1)) > 0 {
      @for $i from 1 through length($initials) {
        @for $s from 1 through length($selectors) {
          @for $l from 1 through length($lasts) {
            $out: append($out, #{nth($initials, $i)} #{nth($selectors, $s)} #{$combinator} #{nth($lasts, $l)}, 'comma');
          }
        }
      }
    } @else {
      @for $s from 1 through length($selectors) {
        @for $l from 1 through length($lasts) {
          $out: append($out, #{nth($selectors, $s)} #{$combinator} #{nth($lasts, $l)}, 'comma');
        }
      }
    }
    @return selector-parse($out);
  }
