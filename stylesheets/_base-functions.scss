//
// utilities [private]
// --------------------------------------------------------------------------

  @function __nth($list, $n) {
    // TODO allow it to handle strings; create str-nth
    @if length($list) == 0 or $n < 1 or $n > length($list) { @return null; }
    @return nth($list, $n);
  }

  @function __first($list) {
    @return __nth($list, 1);
  }

  @function __last($list) {
    @return __nth($list, length($list));
  }

  @function __contains-any($list, $items) {
    @each $item in $items { @if index($list, $item) { @return true; } }
    @return false;
  }

  // TODO: make sure slice supports same logic/signature as native str-slice function
  @function __slice($list, $start: 1, $end: length($list), $sep: list-separator($list)) {
    $output: ();
    @if $start >= 1 and $end >= $start {
      @for $i from $start through $end {
        $output: append($output, nth($list, $i), $sep);
      }
    }
    // @return if(length($output)==1,nth($output,1),$output);
    @return $output;
  }

  @function __normalize-arglist($arglist...) {
    @if length($arglist) == 1 and type-of(nth($arglist, 1)) == list {
      $arglist: join((), nth($arglist, 1), 'comma');
    }
    @return $arglist;
  }

  @function __range-pairs($list, $head: true, $tail: true) {
    @if length($list) == 0 { @return $list; }
    $result: ();
    @for $n from 1 through length($list) + 1 {
      $m: $n - 1; $a: if($m == 0, null, nth($list, $m));
      $b: if($n > length($list), null, nth($list, $n));
      $result: append($result, ($a $b), 'comma');
    }
    $length: length($result);
    $start: if($head, 1, 2);
    $end: if($tail, $length, $length - 1);
    @return __slice($result, $start, $end);
  }

  @function __get($map, $keys...) {
    @if type-of($map) != 'map' or length($map) == 0 { @error 'non-map or zero-length-map passed to __get'; }
    @each $key in $keys {
      @if type-of($map) != 'map' { @return $map; }
      $map: map-get($map, $key);
    }
    @return $map;
  }

  @function __one($unit:'') {
    $ones: ('em': 1em, 'ex': 1ex, 'ch': 1ch, 'rem': 1rem, '%': 1%, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax, 'cm': 1cm, 'mm': 1mm, 'in': 1in, 'px': 1px, 'pt': 1pt, 'pc': 1pc, 'deg': 1deg, 'grad': 1grad, 'rad': 1rad, 'turn': 1turn, 's': 1s, 'ms': 1ms, 'dpi': 1dpi, 'dpcm': 1dpcm, 'dppx': 1dppx);
    @return map-get($ones, $unit) or 1;
  }

  @function __strip($value) {
    @if type-of($value) != 'number' { @error 'non-number passed to __strip'}
    @return if(unitless($value), $value, $value / __one(unit($value)));
  }

  @function __assert($value, $unit: '') {
    @if type-of($value) != 'number' { @error 'non-number passed to __assert'}
    @return __strip($value) * __one($unit);
  }

  @function __convert($value, $unit: '') {
    @if type-of($value) != 'number' { @error 'non-number passed to __convert'}
    @return __one($unit) + __strip($value);
  }


//
// init helpers [private] ✅
// --------------------------------------------------------------------------


  // normalize medium
  @function __normalize-medium($medium) {

    // correct for size and line units/non-units
    $size: map-get($medium, 'size');
    $line: map-get($medium, 'line');
    $base-size: if($medium == $base, 16px, map-get($base, 'size'));
    @if unit($size) != 'px' { $size: __strip($size) * $base-size; }
    @if unit($line) == 'px' { $line: $line / $size; }

    // put these in a new map
    $normal: (
      'size': $size,
      'line': $line,
      'scale': __strip($size / 16px)
    );

    // merge additional corrections if necessary
    @each $key, $value in map-remove($medium, 'size', 'line', 'breakpoint', 'size-mults', 'line-mults', 'inner-x-mults', 'inner-y-mults', 'outer-x-mults', 'outer-y-mults') {
      @if unit($value) == 'px' { $normal: map-merge($normal, ($key: $value / $size * 1rem)); }
    }

    // return merged corrections
    @return map-merge($medium, $normal);
  }

  // setup medium by breakpoints
  @function __setup-medium-by-breakpoints($current, $medium) {

    // merge medium to current; normalize result
    $current: __normalize-medium(map-merge($current, $medium));

    // get and merge sub-maps
    $size-mults: map-merge(map-get($current, 'size-mults'), map-get($medium, 'size-mults') or ());
    $line-mults: map-merge(map-get($current, 'line-mults'), map-get($medium, 'line-mults') or ());
    $inner-x-mults: map-merge(map-get($current, 'inner-x-mults'), map-get($medium, 'inner-x-mults') or ());
    $inner-y-mults: map-merge(map-get($current, 'inner-y-mults'), map-get($medium, 'inner-y-mults') or ());

    // calc and merge additional props
    $breakpoint: map-get($current, 'breakpoint');
    $outer-width: __assert($breakpoint / map-get($current, 'scale'), rem);
    $outer-x: map-get($current, 'outer-right') + map-get($current, 'outer-left');

    // merge these back to reference
    @return map-merge($current, (
      'content-width': $outer-width - $outer-x,
      'size-mults': $size-mults,
      'line-mults': $line-mults,
      'inner-x-mults': $inner-x-mults,
      'inner-y-mults': $inner-y-mults,
    ));
  }

  // setup medium by columns
  @function __setup-medium-by-columns($current, $medium) {

    // merge medium to current; normalize result
    $current: __normalize-medium(map-merge($current, $medium));

    // get and merge sub-maps
    $size-mults: map-merge(map-get($current, 'size-mults'), map-get($medium, 'size-mults') or ());
    $line-mults: map-merge(map-get($current, 'line-mults'), map-get($medium, 'line-mults') or ());
    $inner-x-mults: map-merge(map-get($current, 'inner-x-mults'), map-get($medium, 'inner-x-mults') or ());
    $inner-y-mults: map-merge(map-get($current, 'inner-y-mults'), map-get($medium, 'inner-y-mults') or ());

    // calc and merge additional props
    $size: map-get($current, 'size');
    $inner-x: map-get($current, 'inner-x');
    $outer-x: map-get($current, 'outer-right') + map-get($current, 'outer-left');

    $reading-width: map-get($current, 'reading-width');
    $reading-columns: map-get($current, 'reading-columns');
    $grid-columns: map-get($current, 'grid-columns');
    $reading-vs-grid: $reading-columns/$grid-columns;

    $content-width: ($reading-width + $inner-x) / $reading-vs-grid - $inner-x;
    $outer-width: $content-width + $outer-x;
    $breakpoint: __assert($outer-width * map-get($current, 'scale'), em);

    @return map-merge($current, (
      'content-width': $content-width,
      'breakpoint': $breakpoint,
      'size-mults': $size-mults,
      'line-mults': $line-mults,
      'inner-x-mults': $inner-x-mults,
      'inner-y-mults': $inner-y-mults,
    ));
  }


//
// [private] query helpers
// --------------------------------------------------------------------------


  @function __props-for($group-key){
    $groups: (
      size: (size-mults),
      line: (line-mults),
      inner-x: (inner-x-mults),
      inner-y: (inner-y-mults),
      outer: (outer-right outer-left outer-x-mults),
      outer-y: (outer-top outer-bottom outer-y-mults),
      stack: (inner-y inner-y-mults),
      grid: (inner-x inner-x-mults grid-columns),
      typo: (line line-mults inner-y),
    );
    $group-keys: map-keys($groups);
    @if index($group-keys, $group-key) {
      $group: map-get($groups, $group-key);
      @each $item in $group {
        @if index($group-keys, $item) {
          $group: join($group, map-get($groups, $item));
        }
      }
      @return $group;
    }
    @return $group-key;
  }

  @function __media-for($group-keys...) {
    $group-keys: __normalize-arglist($group-keys...);
    $props: $group-keys; $media-keys: ();
    @each $key in $group-keys {
      $props: join($props, __props-for($key)); }
    // @return $props;
    // function is good up to here; compare against media-orig...
    @each $m, $medium in $media-orig {
      @if __contains-any(map-keys($medium), $props) {
        $media-keys: append($media-keys, $m);
      }
    }
    @return $media-keys;
  }

  @function __query-string($min: null, $max: null) {
    $min: if(map-has-key($media, $min), __get($media, $min, 'breakpoint'), $min);
    $max: if(map-has-key($media, $max), __get($media, $max, 'breakpoint'), $max);
    @return 'screen'
      + if($min, ' and (min-width: #{$min})', '')
      + if($max, ' and (max-width: #{$max - 0.001})', '');
  }


//
// [private] value helpers ✅
// --------------------------------------------------------------------------


  @function __rem($values, $m: $curr-m) {
    @if not $values or length($values) == 0 { @return null; }
    $size: m-value('size', $m); $result: ();
    @each $value in $values {
      @if unit($value) == 'px' { $result: append($result, __assert($value / __strip($size), rem), 'space'); }
      @else { $result: append($result, __assert($value, rem), 'space'); }
    }
    @return if(length($result) > 1, $result, nth($result, 1));
  }

  @function __px($values, $m: $curr-m) {
    @if not $values or length($values) == 0 { @return null; }
    $size: m-value('size', $m); $result: ();
    @each $value in $values {
      @if unit($value) == 'px' { $result: append($result, $value, 'space'); }
      @else { $result: append($result, __assert($value * __strip($size), 'px'), 'space'); }
    }
    @return if(length($result) > 1, $result, nth($result, 1));
  }

  @function __mult($mult, $name, $m: $curr-m) {
    @if type-of($mult) == 'string' { @return map-get(m-value('#{$name}-mult', $m), $mult); }
    @else if type-of($mult) == 'number' { @return __strip(__rem($mult, $m)); }
    @else { @return $mult or 1; }
  }


//
// font value getters ✅
// --------------------------------------------------------------------------



  @function f($font: $curr-font) {
    @return map-get($fonts, $font);
  }

  @function f-value($value, $font: $curr-font) {
    @return __get($fonts, $font, $value);
  }

  @function font-family($font: $curr-font) {
    @return __get($fonts, $font, 'font-family');
  }


//
// medium value getters ✅
// --------------------------------------------------------------------------


  // m object
  @function m($m: $curr-m) {
    @return map-get($media, $m);
  }

  @function m-orig($m: $curr-m) {
    @return map-get($media, $m);
  }


  // generic m value
  @function m-value($value, $m: $curr-m) {
    @return if($m, __get($media, $m, $value), __get($base, $value));
  }

  @function m-orig-value($value, $m: $curr-m) {
    @return if($m, __get($media-orig, $m, $value), __get($base-orig, $value));
  }


  // simple m values
  @function inner-x($mult: $curr-inner-x, $m: $curr-m) {
    @return __mult($mult, 'inner-x', $m) * m-value('inner-x', $m);
  }

  @function inner-y($mult: $curr-inner-y, $m: $curr-m) {
    @return __mult($mult, 'inner-y', $m) * m-value('inner-y', $m);
  }

  @function outer-top($mult: $curr-outer-y, $m: $curr-m) {
    @return __mult($mult, 'outer-y', $m) * m-value('outer-top', $m);
  }

  @function outer-right($mult: $curr-outer-x, $m: $curr-m) {
    @return __mult($mult, 'outer-x', $m) * m-value('outer-right', $m);
  }

  @function outer-bottom($mult: $curr-outer-y, $m: $curr-m) {
    @return __mult($mult, 'outer-y', $m) * m-value('outer-bottom', $m);
  }

  @function outer-left($mult: $curr-outer-x, $m: $curr-m) {
    @return __mult($mult, 'outer-x', $m) * m-value('outer-left', $m);
  }

//
// complex value getters [auto m resolution]
// --------------------------------------------------------------------------


  // mult, font
  @function size($mult: $curr-size, $font: $curr-font) {
    @return __mult($mult, 'size') * 1rem * f-value('size-adjust', $font);
  }
  @function line($mult: $curr-line, $font: $curr-font) {
    @return __mult($mult, 'line') * m-value('line') / f-value('size-adjust', $font);
  }


  // size, font
  @function auto-line($size: size(), $font: $curr-font) {}


  // line, font, type
  @function trim-value($line: $curr-line, $font: $curr-font, $type: 'ex'){
    $lh: line($line, $font);
    $em: f-value('em-adjust', $font);
    $ex: f-value('ex-adjust', $font);
    $deltas: (em: 0, ex: subtract($em, $ex), mx: subtract($em/2, $ex/2));
    @return add(($lh * 1em - $em) / 2), map-get($deltas, $type);
  }


  // mult, line, font, type
  @function trim-margin($mult: $curr-inner-y, $line: $curr-line, $font: $curr-font, $type: 'ex') {
    @return subtract(inner-y($mult), trim-value($line, $font, $type));
  }
  @function trim-margin-ex($mult: $curr-inner-y, $line: $curr-line, $font: $curr-font) {
    @return subtract(inner-y($mult), trim-value($line, $font, 'ex'));
  }
  @function trim-margin-em($mult: $curr-inner-y, $line: $curr-line, $font: $curr-font) {
    @return subtract(inner-y($mult), trim-value($line, $font, 'em'));
  }
  @function trim-margin-mx($mult: $curr-inner-y, $line: $curr-line, $font: $curr-font) {
    @return subtract(inner-y($mult), trim-value($line, $font, 'mx'));
  }
