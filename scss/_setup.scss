@mixin init-media($basis: 'breakpoints') {

  // backup $base to $base-orig
  $base-orig: $base !global;

  // merge $base against $medium-default; normalize result
  $base: __normalize-medium(map-merge($medium-default, $base)) !global;

  // if $media is empty, assign defaults based on type
  @if length($media) == 0 { $media: map-get($media-defaults, $basis) !global; }

  // backup $media
  $media-orig: $media !global;

  // recursive merge accumulation starts from $base
  $current: $base;

  @each $m, $medium in $media {

    // setup $current by type, per $medium
    $current: call('__populate-medium-by-#{$basis}', $current, $medium);

    // merge $current back to $media
    $media: map-merge($media, ($m: $current)) !global;
  }
}

@mixin output-media() {

  // error if init-media has not been done
  @if not $done-inits { @include error('sass-m/output-media: cannot output before init'); }

  // output $media and $base as JSON string, for parsing in front-end
  @include set-css-data(map-merge($globals, (media: $media, base: $base)));

  // set HTML font-size wherever size was originally declared
  @include mm-for('size') { html { font-size: medium-value('scale') * 1em; } }

}



////////////
// SETUPS //
////////////


@mixin init-m($basis: 'breakpoints') {

  $done-inits: true !global;

  @include init-media($basis);
  @include init-fonts();
}


@mixin output-m {

  @if not $done-inits { @include error('sass-m: must run init-m before output-m'); }
  $done-outputs: true !global;

  @include output-media();
  @include output-fonts();
}


@mixin setup-m($basis: 'breakpoints') {

  @include init-m($basis);
  @include output-m();
}
