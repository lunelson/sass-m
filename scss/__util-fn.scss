@function __nth($list, $n) {
  // TODO allow it to handle strings; create str-nth
  @if length($list) == 0 or $n < 1 or $n > length($list) { @return null; }
  @return nth($list, $n);
}

@function __first($list) {
  @return __nth($list, 1);
}

@function __last($list) {
  @return __nth($list, length($list));
}

@function __contains-any($list, $items) {
  @each $item in $items { @if index($list, $item) { @return true; } }
  @return false;
}

// TODO: make sure slice supports same logic/signature as native str-slice function
@function __slice($list, $start: 1, $end: length($list), $sep: list-separator($list)) {
  $output: ();
  @if $start >= 1 and $end >= $start {
    @for $i from $start through $end {
      $output: append($output, nth($list, $i), $sep);
    }
  }
  // @return if(length($output)==1,nth($output,1),$output);
  @return $output;
}

@function __normalize-arglist($arglist...) {
  @if length($arglist) == 1 and type-of(nth($arglist, 1)) == list {
    $arglist: join((), nth($arglist, 1), 'comma');
  }
  @return $arglist;
}

@function __range-pairs($list, $head: true, $tail: true) {
  @if length($list) == 0 { @return $list; }
  $result: ();
  @for $n from 1 through length($list) + 1 {
    $m: $n - 1; $a: if($m == 0, null, nth($list, $m));
    $b: if($n > length($list), null, nth($list, $n));
    $result: append($result, ($a $b), 'comma');
  }
  $length: length($result);
  $start: if($head, 1, 2);
  $end: if($tail, $length, $length - 1);
  @return __slice($result, $start, $end);
}

@function __get($map, $keys...) {
  @if type-of($map) != 'map' or length($map) == 0 { @error 'non-map or zero-length-map passed to __get'; }
  @each $key in $keys {
    @if type-of($map) != 'map' { @return $map; }
    $map: map-get($map, $key);
  }
  @return $map;
}

