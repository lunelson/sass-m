@import 'true';
@import '../index';

//
// setup
//

$base: ( inner-y-mults: (sm: 0.5) );
$media: ( a: ( breakpoint: 20em, inner-y-mults: (sm: 0.5), size: 20px ), b: ( breakpoint: 30em, ) );
@include m-init((output: false, basis: breakpoints));
$catch-throws: true;

//
// module
//

@include test-module('value-helpers') {

  // __mult
    // return 1 if mult is falsey
    // return mult if unitless-number
    // convert mult to rem if it has a unit
    // error if mult is string, and mult or medium are not found
    // return mult from base, if m is null
    // return mult from medium, if m is specified
    // ERROR if mult is string, and mult or medium are not found

  @include test('__mult: return 1 if $mult is falsey') {
    @include assert-equal(__mult(null, 'inner-y'), 1);
  }
  @include test('__mult: return $mult if $mult is unitless-number') {
    @include assert-equal(__mult(3, 'inner-y'), 3);
  }
  @include test('__mult: assert $mult to rem V $base if it has any unit') {
    @include assert-equal(__mult(20px, 'inner-y'), 1.25rem);
  }
  @include test('__mult: assert $mult to rem V $medium if it has any unit') {
    @include assert-equal(__mult(20px, 'inner-y', 'a'), 1rem);
  }
  @include test('__mult: return $mult for $name from $base, if $m is null') {
    @include assert-equal(__mult('sm', 'inner-y', null), 0.5);
  }
  @include test('__mult: return $mult for $name from $medium, if $m is specified') {
    @include assert-equal(__mult('sm', 'inner-y', 'a'), 0.5);
  }
  @include test('_mult: ERROR if mults map is not found') {
    $foo: __mult('sm', 'inner-z');
    @include assert-equal(last-error(), "__mult: no mults-map named 'inner-z-mults'");
  }
  @include test('_mult: ERROR if mult is not found') {
    $foo: __mult('lg', 'inner-y');
    @include assert-equal(last-error(), "__mult: no mult 'lg' found in 'inner-y-mults'");
  }


  // __rem
    // allow SSV args
    // return null if 0-length args passed (suppresses output)
    // correctly convert px inputs to rem
    // correctly assert all other inputs to rem
    // return single item if passed single or 1-length list
    // return list of items if passed more than 1

    // ERROR if $values is not a number or list
    // ERROR if $values is list but any $value therein is not a number
    // ERROR if $m not found

  @include test('__rem: return null if 0-length args') {
    @include assert-equal(__rem(()), null);
  }
  @include test('__rem: correctly convert px inputs to rem V $base') {
    @include assert-equal(__rem(10px 20px 30px), 0.625rem 1.25rem 1.875rem);
  }
  @include test('__rem: correctly convert px inputs to rem V $medium') {
    @include assert-equal(__rem(10px 20px 30px, a), 0.5rem 1rem 1.5rem);
  }
  @include test('__rem: correctly assert all other inputs to rem') {
    @include assert-equal(__rem(1 2em 0.5), 1rem 2rem 0.5rem);
  }
  @include test('__rem: return single item if passed single or 1-length list') {
    @include assert-equal(length(__rem((2))), 1);
  }
  @include test('__rem: return list of items if passed more than 1') {
    @include assert-equal(length(__rem(2 3 4)), 3);
  }


  // __px
    // allow SSV args
    // return null if 0-length args passed (suppresses output)
    // correctly leave px inputs as px
    // correctly convert all other units to px
    // return single item if passed single or 1-length list
    // return list of items if passed more than 1

  @include test('__px: return null if 0-length args') {
    @include assert-equal(__px(()), null);
  }
  @include test('__px: correctly leave px inputs as px') {
    @include assert-equal(__px(10px 20px 30px), 10px 20px 30px);
  }
  @include test('__px: correctly convert other units to px V $base') {
    @include assert-equal(__px(1rem 2em 3ex), 16px 32px 48px);
  }
  @include test('__px: correctly convert other units to px V $medium') {
    @include assert-equal(__px(1rem 2em 3ex,a), 20px 40px 60px);
  }
  @include test('__px: return single item if passed single or 1-length list') {
    @include assert-equal(length(__rem((2))), 1);
  }
  @include test('__px: return list of items if passed more than 1') {
    @include assert-equal(length(__rem(2 3 4)), 3);
  }

  // @include test('foo') {

  //   $desc: 'returns bar when passed baz';
  //   @include assert-equal(foo('baz'), 'bar', $desc);

  // }
}
