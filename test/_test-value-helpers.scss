

/*

VALUE HELPERS

__rem
__px

__mult
  return 1 if mult is falsey
  return mult if unitless-number
  convert mult to rem if it has a unit
  error if mult is string, and mult or medium are not found
  return mult from base, if m is null
  return mult from medium, if m is specified

*/


//
// dependencies

@import 'true';
@import '../index';

//
// setups

$base: ( inner-y-mults: (sm: 0.5) );
$media: ( a: ( breakpoint: 20em, inner-y-mults: (sm: 0.5), size: 20px ), b: ( breakpoint: 30em, ) );
@include m-init((output: false, basis: breakpoints));

@include test-module('value-helpers:') {

  //
  // __mult
  @include test('__mult: return 1 if $mult is falsey') { @include assert-equal(__mult(null, 'inner-y'), 1); }
  @include test('__mult: return $mult if $mult is unitless-number') { @include assert-equal(__mult(3, 'inner-y'), 3); }
  @include test('__mult: assert $mult to rem V $base if it has any unit') { @include assert-equal(__mult(20px, 'inner-y'), 1.25rem); }
  @include test('__mult: assert $mult to rem V $medium if it has any unit') { @include assert-equal(__mult(20px, 'inner-y', 'a'), 1rem); }
  @include test('__mult: return $mult for $name from $base, if $m is null') { @include assert-equal(__mult('sm', 'inner-y', null), 0.5); }
  @include test('__mult: return $mult for $name from $medium, if $m is specified') { @include assert-equal(__mult('sm', 'inner-y', 'a'), 0.5); }
  // NB. error if mult is string, and mult or medium are not found

  //
  // __rem

  //
  // __px

  // @include report(); // ??
}
